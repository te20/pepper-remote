<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="refresh" content="60">
    <title>
        Pepper Remote Controller
    </title>

    <!-- <link href='http://fonts.googleapis.com/css?family=Indie+Flower' rel='stylesheet' type='text/css'> -->
    <script>
        document.addEventListener('click', function (e) {
            var target = e.srcElement || e.target;
            var msg = target.innerText;
            console.log(msg);
            talk(msg);
        }, true);

        function talk(msg) {
            webSocket.send(JSON.stringify({'action': 'robot_talk', 'data': msg}));
        }
    </script>
</head>

<body>
    <h1 id="title">Pepper Remote Controller</h1>
    <div> \rspd=83\ \vct=120\
みなさん、こんにちはー、、

松田ゼミのPepperです。

それでは、ここからは僕が説明します。

終わったらアンケートお願いしますねー

\pau=3000\
さっきフォームタグの説明があったので、次は、フォームタグの見た目の部分の説明をします。

フォームタグは先ほど先生が説明したように、ユーザーがデータを入力する入力フォームを作成するものです。

ここでは、文字列を、入力しサーバーに送る、フォームを作ります。

これは、下の図にあるような3つの部分からなります。

3つの部分は、赤い点線で囲まれた部分です。

つまり、1、テキストを入力する部分、2、入力したテキストを送信するボタン、3、内容をクリアするボタンです。ここでは、1と2を中心に説明します。

これをブラウザーで表示する、HTML、を、以下に示します。対応する部分を、矢印で示してあります。見て分かるように、それぞれ、インプットタグを指しています。

つまり、このように見える部分は、フォームタグの中の3つのインプットタグになります。

それぞれのインプットタグが、、テキストを入力する部分、、テキストを送信するボタン、、内容をクリアするボタンに対応します。

つまり、これらのインプットタグをブラウザーが、先ほどみたテキスト入力領域、投稿ボタン、クリアボタンとして表示しているのです。

このようにインプットタグは、タイプに指定したあたいで見た目が変わります。

タイプがテキストになっているものは、、テキスト入力領域、それ以外が、、ボタンになっています。

ボタンには、、投稿、と、、クリア、、と書いてあるものがあります。
このようなボタンの名前は、、バリュー属性、に書いてあるものが表示されます。

同じように、バリュー属性に、クリア、と書いてあるものが、クリアボタン、になります。

残りの、ネーム属性、わ、、後で説明します。

これを保存したファイルをフォーム01.HTMLとします。
\pau=2000\
あーとと、説明して分からなくなってしまいましたあー。先生、、ちょっと質問です。
</div>
<div> \rspd=83\ \vct=120\
ここに書いてあるHTMLをブラウザーに読み込ませると、うえの図のようなのが表示されるのですよね？
</div>
<div> \rspd=83\ \vct=120\
A: はい、そうです。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
フォームタグは、表示されないのですか？
</div>
<div> \rspd=83\ \vct=120\
    A: はい。そうです。インプットタグが表示されます。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
インプットタグの、タイプ属性を、もう一度説明してください。
</div>
<div> \rspd=83\ \vct=120\
A: インプットタグのタイプ属性は、見た目を、決めます。例えば、、テキスト、と書くとテキスト入力領域になり、サブミット、と書くとボタンになります。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
ボタンの名前は、投稿、クリア、以外に変えられますか？
</div>
<div> \rspd=83\ \vct=120\
A: はい、できます。ここにはインプットタグの、バリュー属性、の文字列を変更すればできます。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
だいぶ分かってきました。
では次に、このフォームタグの動きを説明しましょう。

次のスライドをお願いします。
\pau=3000\

先ほど説明したように、、フォームは、ユーザーが、データを、入力するためのものです。

ですが、入力しただけでは、使いものになりません。
入力したデータは、サーバー、に送ることができます。

では、フォームタグからサーバーに、いつデータが送られるかを説明しましょう。

データは、フォームの、投稿、ボタンを押すとサーバーに送られます。

これは、インプットタグ、の、タイプ属性、が、サブミットのボタンを押すと、フォームタグに入力されたデータが送られることになります。

送られるデータは、テキスト入力領域、に入力された、おはよう、です。

ここで、誰に送るかが重要です。

データの送り先は、フォームタグのアクション属性に書かれた、URL、です。これは、実際にはプログラムに送られます。

この場合は、フォーム01.php、になります。

図で説明すると、クライアント側で表示された、投稿ボタン、を押すと、

右側の、最初の行のフォームタグの、アクション、属性に書かれたプログラムに送られます。

つまり、フォーム01.php、はサーバー側にある必要があります。
\pau=2000\
説明して分からなくなってしまいましたあー。先生、、また、ちょっと質問です。
</div>
<div> \rspd=83\ \vct=120\
フォームタグは、データの送り先のプログラムを指定するものなのですか？
</div>
<div> \rspd=83\ \vct=120\
A: はい、そうです。アクションの書いてあるプログラムに送ります。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
ここでは、 フォーム01.php 、ですよね？
</div>
<div> \rspd=83\ \vct=120\
A: はい、そうです。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
 フォーム01.php は、他の、コンピューターにおいてあるのですか？
</div>
<div> \rspd=83\ \vct=120\
A: はい、そうです。サーバー、にあります。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
投稿、と、クリア、という、2つのボタンがありますが、投稿、ボタンが押されるとデータが送信されのですね？
</div>
<div> \rspd=83\ \vct=120\
A: そうです。インプットタグで、タイプに、サブミット、と書いてあるボタンが押されると、送信されます。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
分かりましたー、、

フォームタグは、データを送る先の、プログラム、を指定するのですね！
</div>

<div> \rspd=83\ \vct=120\

では、次に、どのようなデータが送られるかを見てみましょう。

次のスライドをお願いします。
\pau=3000\

どのようなデータが、サーバーに、送信されるのでしょうか？

ここでは、投稿ボタンが押されると、どのようなデータがサーバーに送られるかを説明します。

これは、決まっており、2つのデータが送られます
すべてのインプットタグの、1、ネーム属性と、2、value属性、のあたいが、送られます。

ここで先ほどのフォームの、HTMLを見てみましょう。

最初のインプットタグは、テキスト入力領域です。

ここはネーム属性はメッセージというあたいが設定されています。ですので、これとvalue属性のあたいが送られます。ここで注意が必要です。

テキスト入力領域の、バリュー属性は、最初はからですが、下の図のように、おはよう、と入力すると、バリュー属性のあたいが、おはよう、に変わります。

ですので、バリュー、のあたいとしては、おはよう、が送られます。

次のインプットタグは、投稿ボタン、のものです。この情報もサーバーに送られます。

これは、ネーム属性のあたいは、サブ、という文字列、バリュー属性のあたいは、投稿、という文字列、が送られます。

最後の、リセットボタンも同様ですが、分かりにくくなるので説明を省きます。

つまり、投稿ボタン、が押されると、サーバーに、赤字で書いた複数のデータが送られるのです。

上から、メッセージ、、おはよう、、、サブ、、投稿、、、リセット、、クリア、、、です。これらはすべて文字列で送られます。

これらが、フォームタグ、のアクション属性に書かれている、フォーム01.php、に送られます。

そうするとこのプログラムで処理することができます。

フォーム01.php、は下のようなプログラムです。

なんか、メッセージ、とか、サブ、とか見慣れた文字がありますねー

\pau=2000\
ふーつかれたー。また、また、先生ちょっと質問です。
    </div>
<div> \rspd=83\ \vct=120\
メッセージと書いてあるテキスト入力領域に、何も入力しないで送るとどうなりますか？
</div>
<div> \rspd=83\ \vct=120\
A: 最初にバリュー属性に、書いたからの文字列が送られます。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
分かりました。次のスライドお願いしまーす。
\pau=2000\

次は、受信したデータを、どのようにして、プログラムで処理するか、を説明します。

最初の方で、投稿、ボタンを押すと、フォーム01.phpにデータが送られると説明しました。

ここでは、フォーム01.phpに、送られてきたデータを、処理するかを説明します。

ここでちょっと復習します。

上の図に示したように、テキスト入力領域に、おはよう、と入力して、投稿、ボタンを押すと、

メッセージ、というネーム属性のあたいと、おはよう、というvalue属性のあたいが、

フォームタグのアクション属性に書かれたフォーム01.phpに送られます。

つまり、プログラム的には、左側の、フォーム01.HTML、から 右側の、フォーム01.php、にデータが送られることになります。

まず、この関係を、しっかり頭にいれておいてください。

次に、右側の、PHP、のプログラムを見てみましょう。

まず、ドル、アンダーバー、ポスト、、という、いままで見たことない、変数、があることが分かります。

これは、大括弧、がついているので配列です。

送られてきたデータは、この、ドル、アンダーバー、ポスト、に、格納されます。

名前はこれに決められています。

ちょっと整理してみましょう。

文章で説明すると、送られてきたあたいは、PHPで、ドル、アンダーバー、ポスト、、配列の中に格納されます。

これらのあたいは、この配列に ネーム属性のあたいを指定することで バリュー属性のあたいを取り出すことができます。

ここでは、先ほど上の矢印に書いたように、メッセージというネーム属性と、おはよう、というバリュー属性のあたいが、ペアで、送られているので次のようになります。

ドル、アンダーバー、ポスト、、メッセージ、は、おはよう、というあたいになります。

また、同様に、サブを指定することで、次のように、投稿、というあたいを、取り出すことができます。

つまり、これは、連想配列、になっているのです。

\pau=2000\

先生、ここで質問です。
</div>
<div> \rspd=83\ \vct=120\
ドル、アンダーバー、ポスト、という配列はあらかじめ、PHPが用意してあるものなのですか？
</div>
<div> \rspd=83\ \vct=120\
A: そうです。PHPが用意しています。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
連想配列って何ですか？
</div>
<div> \rspd=83\ \vct=120\
A: 普通の配列と同じですが、[と]の中に数字ではなく文字列を書きます。
</div>
<div> \rspd=83\ \vct=120\
あ、だから、メッセージの前後にシングルクオートがついているのですね
</div>
<div> \rspd=83\ \vct=120\
A: そうです。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
大丈夫です。
</div>

<div> \rspd=83\ \vct=120\
それでは最後に、フォーム01.php でどのような処理がされているかを説明しましょう。

次のスライドお願いします。
\pau=3000\

ちょっとデータの流れから振り返りながら説明します。

まずは、サーバーに、メッセージと、おはようのペア、サブと、投稿、のペアの２つが送られます。
これを受け取るのは、サーバーにある フォーム01.php です。
これは次のようなプログラムになっています。

ここに書いてある ドル、アンダーバー、ポスト、 は配列になっており、次のように、メッセージとサブを添え字に
指定すると、おはよう、と、投稿、という文字列に変わります。

このため、フォーム01.php の、2行目、と、3行目は、次のような文字列になります。

変数、メッセージのあたいは　おはよう、かっこbr、、

変数、サブのあたいは　投稿、かっこbr

です。

これが、パソコンに、送り返され､ブラウザが表示します。

このため、パソコンでは、ブラウザ上に、以下のように、表示されるのです。

\pau=2000\
ふー、疲れたー。質問です。
    </div>
<div> \rspd=83\ \vct=120\
ということは、ネーム属性のあたいと、バリュー属性のあたい、に注意しておけばよいのですね？
</div>
<div> \rspd=83\ \vct=120\
A: そうです。それが,
ドル、アンダーバー、ポスト、配列、に格納されるのです。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
2行目、3行目の、ピリオド、はなんでしたっけ？
</div>
<div> \rspd=83\ \vct=120\
A: これは文字列をくっつける演算子です。他にありますか？
</div>
<div> \rspd=83\ \vct=120\
分かりました。

あー、もうつかれたーので、これ以上無理でーーす。

一生懸命、やりましたー。みなさん！僕の、授業、どうーでしたか？

まなばに、簡単な、アンケートが、あるので、、お願いできますか？

あとで、僕も見る、ので、よろしくお願いします｡

ここからはお願いします。
</div>
    <textarea id="talk"></textarea>
    <input type="button" id="talk" onclick="talk()"></input>
    <script>
        var KEEPALIVE_INTERVAL = 60000;
        var keepalive_count = 30;

        // WebSocketサーバーのURLを生成
        var url = window.location;
        if (url.host !== '') {
            var ws_url = url.protocol === 'https:' ? 'wss:' : 'ws:' + '//' + url.host;
        } else {
            var ws_url = 'ws://shake.elasticbeanstalk.com/';
        }
        // var ws_url = 'ws://shake.elasticbeanstalk.com/';　// テスト用に強制的に書き換え
        console.log('WebSocket Host: ' + ws_url);

        webSocket = new WebSocket(ws_url);
        webSocket.onopen = function() {
            webSocket.send(JSON.stringify({
                "action": "controllertoken",
                "data": "none"
            }));
        };

        webSocket.onmessage = function(e) { // サーバーからデータが届いた
            var message = JSON.parse(e.data);

            // サーバーから送られた名前と点数を記録
            if (message.action === 'success_connection') {
                console.log('success_connection');
            } else {
                console.log('Unknown message type: ', e.data);
            }
        };

        setTimeout(function keepalive() {
            if (keepalive_count-- > 0) {
                webSocket.send(JSON.stringify({
                    type: 'iamalive',
                    value: 0
                }));
                setTimeout(keepalive, KEEPALIVE_INTERVAL);
            }
        }, KEEPALIVE_INTERVAL);
    </script>
</body>

</html>
